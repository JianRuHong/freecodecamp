//大多说编程语言都是以分号作为一个语句结束的标志, js也是一样的, 但是在js中分号可以省略(浏览器会自动在语句后面加上分号), 但是尽量写上, 避免不必要的bug
//赋值语句
var a = 10086;
//字符串
"Hello, World !";
/**
 * 数据类型和变量
 */

/**
 * 整数和浮点数
 */
//有一大部分编程语言都是有严格的整数和浮点数区分的, 但是在js中整数和浮点数统一是Number类型
1000;
1.00;
0.4578899; -
10098;
NaN; //Not a Number, 表示不是一个数字
Infinity; //特殊的数, 无限大
//上面的都是Number类型的数

/**
 * 字符串
 */

//字符串是开发中最长碰见的数据类型, 在Java中使用双引号表示字符串, 在OC中使用@"字符串"来表示, js中很灵活, 可以使用单引号可双引号来表示字符串

'哈哈, 欢迎来到中国!';
"哈哈, 欢迎出国!";
/**
 * 布尔值
 */
//每种编程语言都有布尔值, 在大部分编程语言中, 非0即为真, 在OC中, 表示一个条件为真用YES, 假用NO, 但是在js中真为true, 假为false, 但是表达的意思是一样的

true; //真
false; //假
1; //真
0; //假

/**
 * 比较运算符
 */

//比较运算符计算的结果会得到一个bool值
/**
 * 注:在大多数语言中, 判断两个值是否相等用==, 但是在js中要使用===(历史遗留问题, 当在js中使用==来比较两个值的时候, 会先转换为字符串类型再进行比较)
 */

//这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：
1 / 7 === (1 - 6 / 7); //false
Math.abs(1 / 7 - (1 - 6 / 7)) < 0.0001; //true

//在js中判断空值或者未定义的值, 一般用underfined或者null(大多数情况都要使用null, 其对应的就是OC中的nill)
undefined;
null;

/**
 * 数组是一个有序的集合, 在js中可以放任何类型的数据
 */
//第一种创建数组的方法
[1, "1", "2", true];
//第二种
new Array(1, , 3, 5, 7, 9);
/**
 * 注: 推荐使用第一种创建数组, 方便阅读
 */

/**
 * js中的对象是一组由键值对组成的无序列表, 其实相当于OC中的字典, 有极高的查找速度
 */

//对象的键值都是字符串类型, 可以加双引号或者不加都可以
var heh = {
  name: "苍井空",
  age: 18,
};

//获取一个对象属性的值, 通过点语法
heh.age;

/**
 * js变量需要遵守标识符的规则
 */

var kiss; //声明了一个js的变量, 值为underfined
kiss = "hello"; //给变量赋值, 在js中赋值使用=, 此时值为hello, 类型是字符串
kiss = 1; //又重新给变量kiss赋值了, 此时值为1, 且为整数
/**
 * 总结:可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，但是要注意只能用var申明一次!这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错!
 */

/**
 strict模式(严格模式):JavaScript在设计之初，为了方便初学者学习，并不强制要求用var申明变量。这个设计错误带来了严重的后果：如果一个变量没有通过var申明就被使用，那么该变量就自动被申明为全局变量, 在同一个页面的不同的JavaScript文件中，如果都不用var申明，恰好都使用了变量i，将造成变量i互相影响，产生难以调试的错误结果。使用var申明的变量则不是全局变量，它的范围被限制在该变量被申明的函数体内（函数的概念将稍后讲解），同名变量在不同的函数体内互不冲突。为了修补JavaScript这一严重设计缺陷，ECMA在后续规范中推出了strict模式，在strict模式下运行的JavaScript代码，强制通过var申明变量，未使用var申明变量就使用的，将导致运行错误。(引用廖雪峰原文)
  */
//启用严格模式
'use strict';//如果浏览器不支持, 就会当做普通的字符串处理

//使用严格模式之后, 变量必须用var来声明变量